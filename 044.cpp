// Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2.
// The first ten pentagonal numbers are:

// 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

// It can be seen that P4 + P7 = 22 + 70 = 92 = P8.
// However, their difference, 70 − 22 = 48, is not pentagonal.

// Find the pair of pentagonal numbers, Pj and Pk, for which their sum
// and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?

#include <iostream>
#include <time.h>
#include "useful.h"

using namespace std;

int main(){
    clock_t tStart = clock();

    int limit = 10000; // Arbitrary number for maxmimum number of loops
    int k = 1;
    while (limit--){
        int Pk = k * (3*k - 1) / 2;
        for (int j = k-1; j > 0; j--){
            int Pj = j * (3*j - 1) / 2;
            if (isPentagonal(Pj + Pk) && isPentagonal(Pk - Pj)){
                cout << Pk - Pj << endl;
                printf("Time taken: %.3fs\n", (double)(clock() - tStart)/CLOCKS_PER_SEC);
                return 0;
            }
        }
        k++;
    }
    cout << "Failed" << endl;
    printf("Time taken: %.3fs\n", (double)(clock() - tStart)/CLOCKS_PER_SEC);
    return 0;
}